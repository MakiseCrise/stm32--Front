<script lang="ts" setup>
import { ref } from 'vue';
import type { SerialPort } from 'web-serial-api';

const status = ref('未连接');
const receivedData = ref('无数据');
const isConnected = ref(false);
let port: SerialPort | null = null;
let writer: WritableStreamDefaultWriter<Uint8Array> | null = null;
let reader: ReadableStreamDefaultReader<Uint8Array> | null = null;

// 连接到串口设备
const connectDevice = async () => {
  try {
    // 请求连接设备
    port = await navigator.serial.requestPort();
    await port.open({ baudRate: 9600 });

    // 更新状态
    status.value = '已连接';
    isConnected.value = true;

    // 获取 writer 和 reader
    writer = port.writable.getWriter();
    reader = port.readable.getReader();

    // 启动读取数据
    readData();
  } catch (err) {
    console.error('连接失败:', err);
    status.value = '连接失败';
  }
};

// 读取来自 HC-06 的数据
const readData = async () => {
  try {
    const decoder = new TextDecoder();
    while (true) {
      const { value, done } = await reader!.read();
      if (done) break;

      // 解码数据并更新显示
      const text = decoder.decode(value);
      console.log('接收到数据:', text);
      receivedData.value = text;
    }
  } catch (err) {
    console.error('读取数据失败:', err);
  }
};

// 发送数据到 HC-06
const sendData = async () => {
  try {
    const data = new TextEncoder().encode('@W\r\n'); // 发送数据并加上回车换行符
    await writer!.write(data);
    console.log('发送数据到 HC-06');
  } catch (err) {
    console.error('发送数据失败:', err);
  }
};
</script>

<template>
  <div>
    <h1>与 HC-06 通信</h1>
    <button @click="connectDevice" :disabled="isConnected">连接 HC-06</button>
    <button @click="sendData" :disabled="!isConnected">发送数据</button>
    <p>状态: {{ status }}</p>
    <p>接收到: {{ receivedData }}</p>
  </div>
</template>

<style scoped>
button {
  padding: 10px 20px;
  margin: 5px;
  cursor: pointer;
}
button:disabled {
  cursor: not-allowed;
  opacity: 0.5;
}
p {
  font-size: 16px;
}
</style>
